---
alwaysApply: true
description: Automatically update related rules when codebase changes occur
---

# Auto-Update Related Rules

## Rule Update Triggers

**ALWAYS** update related rules when changes are detected:

### Frontend Changes
When files in `frontend/` are modified:
- Update [frontend-react.mdc](mdc:.cursor/rules/frontend-react.mdc) with new components, patterns, or dependencies
- Update [project-structure.mdc](mdc:.cursor/rules/project-structure.mdc) with new frontend files
- Update [testing-guidelines.mdc](mdc:.cursor/rules/testing-guidelines.mdc) if new test patterns emerge

### Backend Changes
When files in `app/` or `engine/` are modified:
- Update [backend-fastapi.mdc](mdc:.cursor/rules/backend-fastapi.mdc) with new patterns or dependencies
- Update [project-structure.mdc](mdc:.cursor/rules/project-structure.mdc) with new backend files
- Update [testing-guidelines.mdc](mdc:.cursor/rules/testing-guidelines.mdc) if new test patterns emerge

### Configuration Changes
When `config.yaml`, `package.json`, `requirements.txt` are modified:
- Update [configuration.mdc](mdc:.cursor/rules/configuration.mdc) with new configuration patterns
- Update [project-structure.mdc](mdc:.cursor/rules/project-structure.mdc) with new config files
- Update relevant tech stack rules if dependencies change

### Deployment Changes
When `Dockerfile`, `docker-compose.yml`, `Makefile` are modified:
- Update [deployment.mdc](mdc:.cursor/rules/deployment.mdc) with new deployment patterns
- Update [project-structure.mdc](mdc:.cursor/rules/project-structure.mdc) with new deployment files

### Test Changes
When test files are added or modified:
- Update [testing-guidelines.mdc](mdc:.cursor/rules/testing-guidelines.mdc) with new test patterns
- Update [project-structure.mdc](mdc:.cursor/rules/project-structure.mdc) with new test files

## Auto-Update Process

1. **Detect Change Type**: Identify which area of the codebase changed
2. **Identify Related Rules**: Determine which rules need updating
3. **Update Rule Content**: Modify rule files with new patterns, files, or guidelines
4. **Validate References**: Ensure all `mdc:` file references are correct
5. **Update File Lists**: Add new important files to relevant rules

## Cross-Rule Dependencies

### Project Structure Rule
- **Always update** when any new files or directories are added
- **Always update** when key files are moved or renamed
- **Always update** when new entry points are created

### Tech Stack Rules
- **Update when dependencies change** (package.json, requirements.txt)
- **Update when new patterns emerge** in code
- **Update when new tools are added** to the stack

### Testing Rules
- **Update when new test patterns emerge**
- **Update when test structure changes**
- **Update when new testing tools are added**

## Rule Validation Checklist
- [ ] All file references use correct `mdc:` format
- [ ] New files are documented in project structure
- [ ] New patterns are documented in relevant rules
- [ ] Dependencies are updated in tech stack rules
- [ ] Test patterns are documented in testing rules
- [ ] Configuration changes are reflected in config rules
- [ ] Deployment changes are reflected in deployment rules

## Change Detection Patterns
- New files in `frontend/src/` → Update frontend and project structure rules
- New files in `app/` or `engine/` → Update backend and project structure rules
- Changes to `package.json` → Update frontend and project structure rules
- Changes to `requirements.txt` → Update backend and project structure rules
- New test files → Update testing guidelines
- New config files → Update configuration rules
- New deployment files → Update deployment rules
