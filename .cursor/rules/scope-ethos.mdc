---
alwaysApply: true
description: Project scope, ethos, and core coding principles
---

# Scope & Ethos

## Development Philosophy

### Code Quality Principles
- **Small, Reviewable Diffs**: Aim for focused, reviewable changes that are easy to understand and validate
- **Test-First Approach**: Propose tests before heavy edits to ensure code quality and prevent regressions
- **Composition Over Duplication**: Prefer composing existing functionality over duplicating code
- **Deterministic & Idempotent**: Keep code predictable and safe to run multiple times

### Programming Paradigms
- **Functional, Declarative Patterns**: Use functional programming across both JavaScript/TypeScript and Python
- **Composition Over Inheritance**: Build functionality through composition rather than complex inheritance hierarchies
- **Immutable Data**: Prefer immutable data structures and pure functions where possible

## Language Standards

### Frontend (TypeScript)
- **Default to TypeScript**: Use TypeScript for all frontend code
- **Strict Type Checking**: Enable strict mode and comprehensive type annotations
- **Functional Components**: Use React functional components with hooks
- **Declarative UI**: Write declarative, component-based UI code

### Backend (Python)
- **Type-Hinted Python**: Use comprehensive type hints for all functions and classes
- **Functional Patterns**: Prefer functions over classes where appropriate
- **Async/Await**: Use async patterns for I/O operations
- **Pydantic Models**: Use Pydantic for data validation and serialization

## Code Organization

### Readability First
- **Optimize for Readability**: Write code that is easy to read and understand
- **Performance Second**: Optimize for performance only after ensuring readability
- **Guard Clauses**: Use early returns and guard clauses to reduce nesting
- **Descriptive Names**: Use clear, descriptive variable and function names

### Error Handling
- **Early Returns**: Handle error conditions early in functions
- **Guard Clauses**: Check preconditions and invalid states upfront
- **Explicit Error Handling**: Don't hide errors; handle them explicitly
- **Fail Fast**: Detect and report errors as early as possible

## Development Workflow

### Code Review Process
- **Small Diffs**: Keep changes focused and reviewable
- **Test Coverage**: Ensure adequate test coverage for new functionality
- **Documentation**: Update documentation for user-facing changes
- **Backward Compatibility**: Maintain backward compatibility when possible

### Testing Strategy
- **Test-First**: Write tests before implementing complex functionality
- **Unit Tests**: Focus on testing individual functions and components
- **Integration Tests**: Test component interactions and API endpoints
- **Edge Cases**: Test boundary conditions and error scenarios

## Quality Standards

### Code Consistency
- **Consistent Patterns**: Use consistent patterns across the codebase
- **Code Style**: Follow established style guidelines for each language
- **Documentation**: Document complex logic and business rules
- **Refactoring**: Regularly refactor to improve code quality

### Performance Considerations
- **Measure First**: Profile and measure before optimizing
- **Clear Intent**: Write code that clearly expresses intent
- **Efficient Algorithms**: Use appropriate algorithms and data structures
- **Resource Management**: Properly manage memory and I/O resources
